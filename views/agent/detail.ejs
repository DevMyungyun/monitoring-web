<main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4">
    <div
      class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
      <h1 class="h2"><%=rows.name %> Detail</h1>
      <div class="btn-toolbar mb-2 mb-md-0">
        <div class="btn-group mr-2">
          <button type="button" class="btn btn-sm btn-outline-secondary">Share</button>
          <button type="button" class="btn btn-sm btn-outline-secondary">Export</button>
        </div>
        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle">
          <span data-feather="calendar"></span>
          This week
        </button>
      </div>
    </div>
    <canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>

    <div class="col-md-8 order-md-1">
      <!-- <form class="form-signin" action="/agent" method="POST">
        <input type="hidden" name="_method" value="put" /> -->
        <input type="hidden" name="name" class="form-control" id="name" value="<%=rows.name %>">
        <div class="mb-3">
          <label for="status">Status</label>
          <div class="input-group">
            <input type="text" name="status" class="form-control" id="status" value="<%=rows.status %>">
          </div>
        </div>
        <div class="mb-3">
          <label for="description">Description</label>
          <div class="input-group">
            <input type="text" name="description" class="form-control" id="description" value="<%=rows.description %>">
          </div>
        </div>
        <div class="mb-3">
          <label for="os">OS</label>
          <input type="os" name="os" class="form-control" id="os" value="<%=rows.os %>" required>
          <div class="invalid-feedback">
            Please enter what kind of OS.
          </div>
        </div>
        <div class="mb-3">
          <label for="version">OS Version</label>
          <input type="version" name="version" class="form-control" id="version" value="<%=rows.version %>"
            required>
          <div class="invalid-feedback">
            Please enter what kind of OS version.
          </div>
        </div>
        <button class="btn btn-primary" id="update" type="button" onclick="updateBtn();" >Update</button>
        <button class="btn btn-danger" id="delete" type="button" onclick="deleteBtn();" >Delete</button>
      </form>
    </div>
  </main>
<script src="/chart/Chart.js"></script>
<!-- <link rel="stylesheet" type="text/css" href="/chart/Chart.min.css"> -->
<script>
var data =<%- context %>;
console.log(data.cpu);
var ctx = document.getElementById('myChart');
var myChart = new Chart(ctx, {
  type: 'line',
    data: {
        labels: data.saved_at,
        datasets: [{
            label: 'CPU',
            data: data.cpu,
            borderColor: "rgba(54, 162, 235, 1)",
            backgroundColor: "rgba(54, 162, 235, 0.5)",
            fill: true,
            lineTension: 0
        },
        {
            label: 'Memory',
            data: data.mem,
            borderColor: "rgba(153, 102, 255, 1)",
            backgroundColor: "rgba(153, 102, 255, 0.5)",
            fill: true,
            lineTension: 0
        },
        {
            label: 'Disk',
            data: data.disk,
            borderColor: "rgba(255, 159, 64, 1)",
            backgroundColor: "rgba(255, 159, 64, 0.5)",
            fill: true,
            lineTension: 0
        }
      ]
    },
    options: {
        responsive: true,
        title: {
            display: true,
            text: 'Resource Status'
        },
        tooltips: {
            mode: 'index',
            intersect: false,
        },
        hover: {
            mode: 'nearest',
            intersect: true
        },
        scales: {
            xAxes: [{
                display: true,
                scaleLabel: {
                    display: true,
                    labelString: 'Time'
                }
            }],
            yAxes: [{
                display: true,
                ticks: {
                    suggestedMin: 0,
                },
                scaleLabel: {
                    display: true,
                    labelString: 'Resource Usage{%)'
                }
            }]
        }
    }
});

function deleteBtn() {
    if(confirm("Are you sure of delete this agent?")){
        var xhr;
        if (window.XMLHttpRequest) { // code for IE7+, Firefox, Chrome, Opera, Safari
            xhr = new XMLHttpRequest();
        } else { // code for IE6, IE5
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xhr.open('delete', '/agent?name='+<%= rows.name %>, true);
        try {
            xhr.send();
        } catch (e) {
            console.log(e);
        }
        // xhr.onprogress = function () {
        //     console.log('LOADING: ', xhr.status);
        // };
        // xhr.onload = function () {
        //     console.log('DONE: ', xhr.status);
        // };
        xhr.onreadystatechange = function (e) {
          const res = JSON.parse(xhr.response)
            if (res.code === "200" || res.code == "201") {
                alert('Successfully delete the agent')
                window.location.href = '/agent/main';
            } else {
                alert("Unexpected error");
            }
        }
    } else {
        console.log('Cancel delete this agent.');
    }   
}

function updateBtn() {

    if(confirm("Are you sure of update this agent?")){
        var xhr;
        if (window.XMLHttpRequest) { // code for IE7+, Firefox, Chrome, Opera, Safari
            xhr = new XMLHttpRequest();
        } else { // code for IE6, IE5
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
        xhr.open('put', '/agent?name='+<%= rows.name %>, true);
        xhr.setRequestHeader("Content-Type", "application/json")
        let body = {}
        body.description = document.getElementById('description').value
        body.os = document.getElementById('os').value
        body.version = document.getElementById('version').value

        var jsonBody = JSON.stringify(body)
        try {
            xhr.send(jsonBody);
        } catch (e) {
            console.log(e);
        }
        // xhr.onprogress = function () {
        //     console.log('LOADING: ', xhr.status);
        // };
        // xhr.onload = function () {
        //     console.log('DONE: ', xhr.status);
        // };
        xhr.onreadystatechange = function (e) {
          const res = JSON.parse(xhr.response)
            if (res.code === "200" || res.code == "201") {
                alert('Successfully update the agent')
                window.location.href = '/agent/main';
            } else {
                alert("Unexpected error");
            }
        }
    } else {
        console.log('Cancel delete this agent.');
    }
}
</script>