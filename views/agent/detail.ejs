<main role="main" class="col-md-9 ml-sm-auto col-lg-10 px-md-4">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2"><%=rows.name %> Detail</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
      <div class="btn-group mr-2">
        <button type="button" class="btn btn-sm btn-outline-secondary" id="Handshake"
          onclick="handshakeAgent();">Handshake</button>
        <input type="button" class="btn btn-sm btn-outline-secondary" id="active" value="On" onclick="activeAgent();" />
        <!-- <input type="button" class="btn btn-sm btn-outline-secondary" id="inactive" value="Off" onclick="inactiveAgent();" /> -->
      </div>
      <div class="dropdown">
        <button type="button" class="btn btn-sm btn-outline-secondary dropdown-toggle" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
          <span data-feather="calendar"></span>
          1 day
        </button>
        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <a class="dropdown-item" href="#">Action</a>
          <a class="dropdown-item" href="#">Another action</a>
          <a class="dropdown-item" href="#">Something else here</a>
        </div>
      </div>
      
    </div>
  </div>
  <canvas class="my-4 w-100" id="myChart" width="900" height="380"></canvas>

  <div class="col-md-8 order-md-1" style="margin-left: 100px;">
    <!-- <form class="form-signin" action="/agent" method="POST">
        <input type="hidden" name="_method" value="put" /> -->
    <input type="hidden" name="name" class="form-control" id="name" value="<%=rows.name %>">
    <div class="mb-3">
      <label for="status">Status</label>
      <div class="input-group">
        <input type="text" name="status" class="form-control" id="status" value="<%=rows.status %>" disabled>
      </div>
    </div>
    <div class="mb-3">
      <label for="description">Description</label>
      <div class="input-group">
        <input type="text" name="description" class="form-control" id="description" value="<%=rows.description %>">
      </div>
    </div>
    <div class="mb-3">
      <label for="os">OS</label>
      <input type="os" name="os" class="form-control" id="os" value="<%=rows.os %>" required>
      <div class="invalid-feedback">
        Please enter what kind of OS.
      </div>
    </div>
    <div class="mb-3">
      <label for="version">OS Version</label>
      <input type="version" name="version" class="form-control" id="version" value="<%=rows.version %>" required>
      <div class="invalid-feedback">
        Please enter what kind of OS version.
      </div>
    </div>
    <div class="mb-3">
      <label for="address">Address</label>
      <input type="address" name="address" class="form-control" id="address" value="<%=rows.address %>" required>
      <div class="invalid-feedback">
        Please enter the agent address.
      </div>
    </div>
    <div class="mb-3">
      <label for="create_at">Create Time</label>
      <input type="create_at" name="create_at" class="form-control" id="create_at" value="<%=rows.create_at %>"
        disabled>
    </div>
    <div class="mb-3">
      <label for="update_at">Update Time</label>
      <input type="update_at" name="update_at" class="form-control" id="update_at" value="<%=rows.update_at %>"
        disabled>
    </div>
    <button class="btn btn-primary" id="update" type="button" onclick="updateBtn();">Update</button>
    <button class="btn btn-danger" id="delete" type="button" onclick="deleteBtn();">Delete</button>
    </form>
  </div>
</main>
<script src="/chart/Chart.js"></script>
<script src="/javascripts/http.js"></script>
<!-- <link rel="stylesheet" type="text/css" href="/chart/Chart.min.css"> -->
<script>
  window.addEventListener('DOMContentLoaded', function () {
    let query = '?name=' + "<%= rows.name %>"
    httpRequest('get', '/agent/healthcheck', query).then(result => {
      if (result.code === '200') {
        console.log('Successfully health check the agent')
      } else if (result.code === '500') {
        alert("Fail to health check. Check the agent status.")
      } else {
        alert("Unexpected error");
      }
    })

    var status = document.getElementById('status').value;
    var handshakeBtn = document.getElementById('Handshake');
    if (status === 'stop') {
      handshakeBtn.disabled = 'disabled';
      document.getElementById('active').value = "On";
    } else if (status === 'running') {
      handshakeBtn.disabled = 'disabled';
      document.getElementById('active').value = "Off";
    } else {
      handshakeBtn.disabled = false;
    }
  });

  var data = <%-context %> ;
  data.sort((a, b)=> { return new Date(a.saved_at).getTime() - new Date(b.saved_at).getTime()})
  let cpu = []
  let mem = []
  let disk = []
  let time = []
  for (let i=0; i<data.length; i++) {
    cpu.push(data[i].cpu)
    mem.push(data[i].mem)
    disk.push(data[i].disk)
    time.push(data[i].saved_at)
  }
  var ctx = document.getElementById('myChart');
  var myChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: time,
      datasets: [{
          label: 'CPU',
          data: cpu,
          borderColor: "rgba(54, 162, 235, 1)",
          backgroundColor: "rgba(54, 162, 235, 0.5)",
          fill: true,
          lineTension: 0
        },
        {
          label: 'Memory',
          data: mem,
          borderColor: "rgba(153, 102, 255, 1)",
          backgroundColor: "rgba(153, 102, 255, 0.5)",
          fill: true,
          lineTension: 0
        },
        {
          label: 'Disk',
          data: disk,
          borderColor: "rgba(255, 159, 64, 1)",
          backgroundColor: "rgba(255, 159, 64, 0.5)",
          fill: true,
          lineTension: 0
        }
      ]
    },
    options: {
      responsive: true,
      title: {
        display: true,
        text: 'Resource Status'
      },
      tooltips: {
        mode: 'index',
        intersect: false,
      },
      hover: {
        mode: 'nearest',
        intersect: true
      },
      scales: {
        xAxes: [{
          display: true,
          scaleLabel: {
            display: true,
            labelString: 'Time'
          }
        }],
        yAxes: [{
          display: true,
          ticks: {
            suggestedMin: 0,
          },
          scaleLabel: {
            display: true,
            labelString: 'Resource Usage{%)'
          }
        }]
      }
    }
  });

  function deleteBtn() {
    if (confirm("Are you sure of delete this agent?")) {
      let query = '?name=' + "<%= rows.name %>"

      httpRequest('delete', '/agent', query).then(result => {
        if (result.code === '200') {
          alert('Successfully delete the agent.')
          window.location.href = '/agent/main';
        } else if (result.code === '500') {
          alert("Fail to delete the agent.")
        } else {
          alert("Unexpected error");
        }
      })
    } else {
      console.log('Cancel delete this agent.');
    }
  }

  function updateBtn() {
    if (confirm("Are you sure of update this agent?")) {
      let body = {}
      body.description = document.getElementById('description').value
      body.os = document.getElementById('os').value
      body.version = document.getElementById('version').value
      body.address = document.getElementById('address').value

      let query = '?name=' + "<%= rows.name %>"
      httpRequest('put', '/agent', query, body).then(result => {
        if (result.code === '200') {
          alert('Successfully update the agent.')
          window.location.href = '/agent/main';
        } else if (result.code === '500') {
          alert("Fail to update the agent.")
        } else {
          alert("Unexpected error");
        }
      })
    } else {
      console.log('Cancel delete this agent.');
    }
  }

  function handshakeAgent() {
    let query = '?name=' + "<%= rows.name %>"
    httpRequest('get', '/agent/handshake', query).then(result => {
      if (result.code === '200') {
        alert('Successfully handshake with ' + "<%= rows.name %>" + ' agent')
      } else if (result.code === '500') {
        alert("Fail to handshake with the agent.")
      } else {
        alert("Unexpected error");
      }
    })
  }

  function activeAgent() {
    let activeBtn = document.getElementById('active').value
    let query = '?name=' + "<%= rows.name %>"
    if (activeBtn === 'On') {
      httpRequest('post', '/agent/cron/start', query).then(result => {
        if (result.code === '200') {
          alert('Successfully ' + "<%= rows.name %>" + ' agent cron start')
          location.reload(true);
        } else if (result.code === '500') {
          alert("Fail to start the agent.")
        } else {
          alert("Unexpected error");
        }
      })
    } else {
      httpRequest('get', '/agent/cron/stop', query).then(result => {
        if (result.code === '200') {
          alert('Successfully ' + "<%= rows.name %>" + ' agent stop')
          location.reload(true);
        } else if (result.code === '500') {
          alert("Fail to stop the agent.")
        } else {
          alert("Unexpected error");
        }
      })
    }

  }

</script>